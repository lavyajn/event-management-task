node_modules/
.env

import React, { useState, useEffect, useCallback } from 'react';

// --- Configuration ---
// Make sure this matches your running backend server port
const API_BASE_URL = 'http://localhost:3000/api';

// --- Main App Component ---
function App() {
    const [events, setEvents] = useState([]);
    const [modal, setModal] = useState(null); // Can be 'createUser', 'createEvent', 'cancel', or 'details'
    const [selectedEvent, setSelectedEvent] = useState(null);
    const [toastMessage, setToastMessage] = useState('');

    // --- Data Fetching ---
    const fetchEvents = useCallback(async () => {
        try {
            const response = await fetch(`${API_BASE_URL}/events`);
            const data = await response.json();
            // Handle both an array of events or the "no events" message
            setEvents(Array.isArray(data) ? data : []);
        } catch (error) {
            showToast('Could not fetch events.');
        }
    }, []);

    useEffect(() => {
        fetchEvents();
    }, [fetchEvents]);

    // --- UI Helpers ---
    const showToast = (message) => {
        setToastMessage(message);
        setTimeout(() => setToastMessage(''), 3000);
    };

    const openDetailsModal = async (event) => {
        try {
            // We need to get both the event details (with registered users) and the stats
            const [detailsRes, statsRes] = await Promise.all([
                fetch(`${API_BASE_URL}/events/${event.id}`),
                fetch(`${API_BASE_URL}/events/${event.id}/stats`)
            ]);

            if (!detailsRes.ok || !statsRes.ok) {
                throw new Error('Failed to fetch details');
            }
            
            const detailsData = await detailsRes.json();
            const statsData = await statsRes.json();

            // Combine the data and show the modal
            setSelectedEvent({ ...detailsData, stats: statsData });
            setModal('details');
        } catch (error) {
             showToast('Error loading event details.');
        }
    };
    
    // --- Render ---
    return (
        <div className="bg-gray-900 text-white min-h-screen font-sans">
            <div className="container mx-auto p-8">
                <header className="text-center mb-12">
                    <h1 className="text-4xl font-bold text-indigo-400">Event Management Portal</h1>
                    <p className="text-gray-400 mt-2">A simple interface for your event API.</p>
                </header>

                <div className="flex justify-center flex-wrap gap-4 mb-12">
                    <button onClick={() => setModal('createUser')} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Create User</button>
                    <button onClick={() => setModal('createEvent')} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Create Event</button>
                    <button onClick={() => setModal('cancel')} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Cancel Registration</button>
                </div>

                <main>
                    <h2 className="text-3xl font-bold mb-6 text-center">Upcoming Events</h2>
                    {events.length > 0 ? (
                        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {events.map(event => (
                                <div key={event.id} onClick={() => openDetailsModal(event)} className="bg-gray-800 p-5 rounded-lg border border-gray-700 cursor-pointer hover:border-indigo-500">
                                    <h3 className="text-xl font-bold text-indigo-400">{event.title}</h3>
                                    <p className="text-gray-400 mt-2">{new Date(event.date).toLocaleString()}</p>
                                    <p className="text-gray-400">{event.location}</p>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <p className="text-center text-gray-500">No upcoming events found.</p>
                    )}
                </main>

                {/* --- Modals --- */}
                {modal === 'createUser' && <CreateUserModal showToast={showToast} onClose={() => setModal(null)} />}
                {modal === 'createEvent' && <CreateEventModal showToast={showToast} onClose={() => setModal(null)} onEventCreated={fetchEvents} />}
                {modal === 'cancel' && <CancelModal showToast={showToast} onClose={() => setModal(null)} />}
                {modal === 'details' && selectedEvent && <DetailsModal event={selectedEvent} onClose={() => setModal(null)} showToast={showToast} refreshEvent={() => openDetailsModal(selectedEvent)} />}

                {/* --- Toast Notification --- */}
                {toastMessage && <div className="fixed bottom-5 right-5 bg-gray-700 text-white py-2 px-4 rounded-lg shadow-lg">{toastMessage}</div>}
            </div>
        </div>
    );
}

// --- Modal Components (Simplified & Separate) ---

const ModalWrapper = ({ title, onClose, children }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
        <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md border border-gray-700">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-indigo-400">{title}</h2>
                <button onClick={onClose} className="text-gray-400 text-2xl">&times;</button>
            </div>
            {children}
        </div>
    </div>
);

function CreateUserModal({ onClose, showToast }) {
    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = { name: e.target.name.value, email: e.target.email.value };
        try {
            const response = await fetch(`${API_BASE_URL}/users`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });
            const data = await response.json();
            showToast(data.message || (response.ok ? 'User created!' : 'Failed to create user.'));
            if(response.ok) onClose();
        } catch (error) {
            showToast('Network error.');
        }
    };
    return (
        <ModalWrapper title="Create New User" onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <input name="name" placeholder="Name" required className="w-full p-2 bg-gray-700 rounded"/>
                <input name="email" type="email" placeholder="Email" required className="w-full p-2 bg-gray-700 rounded"/>
                <button type="submit" className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Submit</button>
            </form>
        </ModalWrapper>
    );
}

function CreateEventModal({ onClose, showToast, onEventCreated }) {
    const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = {
            title: e.target.title.value,
            date: e.target.date.value,
            location: e.target.location.value,
            capacity: parseInt(e.target.capacity.value, 10),
        };
        try {
            const response = await fetch(`${API_BASE_URL}/events`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });
            const data = await response.json();
            showToast(data.message || (response.ok ? 'Event created!' : 'Failed to create event.'));
            if (response.ok) {
                onEventCreated(); // Refresh the event list
                onClose();
            }
        } catch (error) {
            showToast('Network error.');
        }
    };
    return (
        <ModalWrapper title="Create New Event" onClose={onClose}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <input name="title" placeholder="Event Title" required className="w-full p-2 bg-gray-700 rounded"/>
                <input name="date" placeholder="Date (YYYY-MM-DDTHH:MM)" required className="w-full p-2 bg-gray-700 rounded"/>
                <input name="location" placeholder="Location" required className="w-full p-2 bg-gray-700 rounded"/>
                <input name="capacity" type="number" placeholder="Capacity" required className="w-full p-2 bg-gray-700 rounded"/>
                <button type="submit" className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Submit</button>
            </form>
        </ModalWrapper>
    );
}

function CancelModal({ onClose, showToast }) {
     const handleSubmit = async (e) => {
        e.preventDefault();
        const formData = { userId: e.target.userId.value, eventId: e.target.eventId.value };
        try {
            const response = await fetch(`${API_BASE_URL}/registrations`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });
            const data = await response.json();
            showToast(data.message || (response.ok ? 'Cancellation successful!' : 'Cancellation failed.'));
             if (response.ok) onClose();
        } catch (error) {
            showToast('Network error.');
        }
    };
    return (
        <ModalWrapper title="Cancel a Registration" onClose={onClose}>
             <form onSubmit={handleSubmit} className="space-y-4">
                <input name="userId" placeholder="User ID to cancel" required className="w-full p-2 bg-gray-700 rounded"/>
                <input name="eventId" placeholder="Event ID to cancel from" required className="w-full p-2 bg-gray-700 rounded"/>
                <button type="submit" className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Confirm Cancellation</button>
            </form>
        </ModalWrapper>
    );
}

function DetailsModal({ event, onClose, showToast, refreshEvent }) {
    const [registerUserId, setRegisterUserId] = useState('');

    const handleRegister = async () => {
        if (!registerUserId) return showToast('Please provide a User ID.');
        try {
             const response = await fetch(`${API_BASE_URL}/registrations`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId: registerUserId, eventId: event.id }),
            });
            const data = await response.json();
            showToast(data.message || (response.ok ? 'Registration successful!' : 'Registration failed.'));
            if(response.ok) {
                refreshEvent(); // Re-fetch details to show the new user
                setRegisterUserId('');
            }
        } catch(error) {
            showToast('Network error.');
        }
    };

    return (
        <ModalWrapper title={event.title} onClose={onClose}>
            <div className="space-y-1 text-gray-300">
                <p><strong>Date:</strong> {new Date(event.date).toLocaleString()}</p>
                <p><strong>Location:</strong> {event.location}</p>
                <p><strong>Capacity:</strong> {event.stats.totalRegistrations} / {event.capacity}</p>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-700">
                <h3 className="font-bold mb-2">Register User</h3>
                <div className="flex gap-2">
                    <input value={registerUserId} onChange={e => setRegisterUserId(e.target.value)} placeholder="Paste User ID to register" className="w-full p-2 bg-gray-700 rounded"/>
                    <button onClick={handleRegister} className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg">Register</button>
                </div>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-700">
                <h3 className="font-bold mb-2">Registered Users ({event.registeredUsers.length})</h3>
                <div className="max-h-32 overflow-y-auto space-y-1">
                {event.registeredUsers.length > 0 ? (
                    event.registeredUsers.map(u => <p key={u.id} className="bg-gray-700 p-2 rounded text-sm">{u.name} ({u.email})</p>)
                ) : <p className="text-gray-500 text-sm">No users registered yet.</p>}
                </div>
            </div>
        </ModalWrapper>
    );
}

export default App;

